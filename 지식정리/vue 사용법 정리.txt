// 세팅

1. npm install -g @vue/cli => vue.cli를 전역설치
2. npm init vue@latest    => 프로젝트 자동생성
   => router와 Pinia 선택하기, 나머지는 No로 해도 무방
        ㄴ router는 파일들 하나로 연결해주는 그거
        ㄴ Pinia는 storage 관련
3. npm run dev => 미리보기 실행





// components에 관하여
페이지의 구성요소들을 따로따로 나눠놓은 것을 의미함
지금까지는 html 파일 하나에 모든 구성요소들을 작성했음
그 때문에 html 태그들이 너무 길어져서 뇌정지가 왔음
그걸 부분 별로 따로따로 관리하고 조립하는 것이 components임

{예시}
기존 => 신상수 하나를 쭉 조각해서 만듬
지금 => 팔, 다리, 몸통, 머리 등을 따로 만들어서 하나로 붙임
        ㄴ> 이걸 하기 쉽게 만들어주는 게 vue



// router 사용법 - vue 파일들 이어주기
설치 과정에서 router 항목을 체크했다면 기본 틀이 자동 세팅됨
path : 주소창에 이 글씨가 뜨는 상황에서
name : 이 name을 담고 있는
component : 이 파일을 RouterView에 띄워라

* RouterView?
=> path의 값에 따라 component를 갈아끼워주는 html 태그
<template>
    <RouterView />
        ㄴ 여기가 주소창에 뜨는 path 글자에 따라
           갈아끼워진다는 뜻
</template





// v-if와 v-for





// methods
이 파일 안에서만 사용할 함수들을 넣을 수 있음
{예시}
export default{
    methods: {
        const 함수 = () => {
            실행할 내용
        }
    }
}


// setup(){}
다른 파일로 보내줄 용도의 함수/변수들은 여기에 넣어서 작성
만약 이 안에 작성한 함수/변수들을 이 파일에서도 쓰고 싶다면
return이라는 객체 안에 이름을 넣어주면 됨
{예시}
setup(){
    const s3 = "신상수"
    return { s3 }
} => 이제 이 파일에서도 s3 변수를 쓸 수 있음




// data
이 파일 안에서 사용할 데이터들을 넣을 수 있음
{예시}
export default{
    data: {
        name : "신상수", age : 26
    }
}




// 데이터 바인딩
태그의 속성에 콜론을 붙여주면 안에서 데이터나 변수를 쓸 수 있음
이 덕분에 일일이 .innerHTML이나 .html() 같은 걸 쓸 필요가 없어짐!
{예시}
<div :style:="style" ></div>
export default{
    data : { style : "display:block" }
}
=> div에 display:none; 이 적용되게 됨

{예시2}
<a :href="naver" ></a>
export default{
    data : {naver : 'https://www.naver.com/'}
}
=> naver로 링크됨


{예시3} 데이터와 methods 접목하기
<div :style="border" ></div>
export default{
    data : { border : "border:1px solid black" },
    methods : {
        const border = () => {
            return this.border;
            // 이 파일의 데이터를 쓴다는 의미로 this
        }
    }
}
=> 함수가 data 안의 값을 들고 태그 속성 안으로 들어감


{예시4} classToggle처럼 응용할 수도 있음
<div :class="hide : isHide" ></div>
<button @click="toggle" ></button
export default{
    data: { isHide : false },
    methods: {
        const toggle = ()=> {
            this.isHide = !this.isHide;
        }
    }
}
=> 버튼으로 toggle 함수를 발동시키면 isHide가 true로 바뀌어서
   hide라는 이름의 클래스가 활성화/비활성화 됨
=> * 만약 클래스명 사이에 '-'가 들어있다면 ''로 클래스명을 묶어줘야 함



// 이벤트
html 태그에 직접 이벤트를 주기

{{ age }}
// {{}} 안에는 변수는 물론 자바스크립트 문법이 들어갈 수 있음
                           ㄴ 함수 넣을 때에는 () 붙여주기
<button v-on:click="plus" ></button>
<button v-on:click="minus"></button>
export default{
    data: { age : 26 },
    methods: {
        plus(){
            this.age+=1;
        },
        minus(){
            this.age-=1;
        }
    }
}
=> 버튼 누를 때마다 화면의 숫자가 덧셈뺄셈
v-on:click, v-on:scroll, v-on:submit... 등등 가능
keyup, keypres도 사용 가능, 무슨 키인지 인식 지원
=> v-on:keyup.enter 같은 거
.enter / .tab / .delete / .esc
/ .space / .up / .down / .left / .right
/ .ctrl / .alt / .shift / .meta(맥의 command키)/
/ 마우스 클릭 .left  .right  .middle /
/ 조합키 .exact
{예시} => @click.ctrl.exact 컨트롤 + 클릭
{예시} => @keyup.ctrl.exact 컨트롤 + keyup

* v-on은 @로 줄여 써도 됨

.prevent : 페이지 새로고침 방지 (submit에 주로 씀)
.once : 한 번만 발동되게




// 양방향 바인딩
연결된 내용들이 자동으로 동기화 되도록
무슨 소리? => input에 입력한 글씨가 다른 곳에 동시에 뜨거나 함

v-model을 사용함

{예시}
<input type="text" v-model="입력한글자" />
{{ 입력한글자 }}
=> input에 입력한 글자가 새로고침이나 버튼 없이 실시간으로 나옴
   제이쿼리의 .val() 혹은 자바스크립트의 .value와 비슷하게 여겨도 됨




// [ composition API 기능 ]
vue를 제대로 사용하기 위해 도움이 되는 고오급 기능들
export default{
    setup() {
        // 이 안에 담아두자
    }
}


import { 사용할API이름 } from 'vue'
// 사용할 API는 이렇게 꺼내오자


/** computed */
export default{
    data: { name : "신상수" },
    computed: {
        reverse(){
            return this.name.split('').reverse().join('')
            // 문자열 거꾸로 해주는 코드 ( "수상신" )
        }
    }
}
=> 함수와는 다르게 결과값을 미리 계산해 갖고 있음
   ㄴ> this.name에 뿌리를 박고 있기 때문에
       여러 군데에 사용해놓고 한꺼번에 내용을 바꾸기 편함
       this.name의 값이 바뀔 때만 계산을 새로 하므로 효율적이라고 함



/** watch */
대상을 지정해 감시하고, 값이 변하면 준비된 콜백함수를 실행함
watch(
    [ ()=> 감시대상1, ()=> 감시대상 2 ],
    ( [감시대상1이전, 감시대상1이후], [감시대상1이전, 감시대상1이후] ) => {
        실행될 함수 내용
    },
    { immediate : true } // 변경 없어도 일단 한 번 실행
)
=> 감시대상, ( 감시대상 이전, 이후 ) => { 함수내용 }, 옵션 순서로 작성
=> 여러 감시대상을 지정하고 싶으면 배열을 이용해서 묶기



/** reactive와 ref */
반응형 데이터 => 데이터만 변경시켜도 화면에 표시된 값까지 바뀌게 할 수 있음
                ㄴ 코드가 간단해짐

ref() => 데이터가 하나일 때 사용함
         // 여럿일 때도 사용 가능한데 일일이 .value를 추가로 적어줘야 함
reactive() => 데이터가 배열이나 객체일 때만 사용함

{ref 예시}
import { ref } from 'vue'

{{ name }}
<button @click="reName" ></button>

export default{
    setup() {
        const name = ref('신상수');

        const reName = () => {
            name.value = '멋진 신상수'
        }
    }
}

=> 버튼을 누르면 reName 함수가 실행돼서 name의 값이 바뀌는데,
   이 변경사항이 html 부분에 자동으로 적용된다는 것!


{reactive 예시}
import { reactive } from 'vue'

<h1>점심 뭐 먹지</h3>
{{ menu[0], menu[1], menu[2] }}
<button @click="고기반찬으로" ></button>

export default{
    setup() {
        const menu = reactive([ "샐러드", "고구마", "두부" ])

        const 고기반찬으로 = () => {
            menu[0] = "제육볶음";
            menu[1] = "간장치킨";
            menu[2] = "튀긴족발";
        }
    }
}
=> 버튼을 누르면 함수가 실행되서 배열 안의 데이터들이 바뀜
   이 변경사항이 html 부분에 자동으로 적용됨!


{reactive 예시 2}
import { reactive } from 'vue'

<h1>내 정보</h1>
{{ person.name }}
<button @click="nameChange"></button>

export default{
    setup() {
        const person = reactive({
            name : "신상수",
            age : 26
        })

        const nameChange = () => {
            person.name = "마동석"
        }
    }
}
=> 버튼을 누르면 nameChange 함수가 실행되서 객체 안의 데이터가 바뀜
   이 변경사항이 html 부분에 자동적용돼서 신상수가 마동석이 됨




/** provide와 inject, 그리고 emit() */
provide와 inject는 상위 파일에서 준 변수나 함수를
하위 파일에서 받도록 해주는 기능

import { provide, inject } from 'vue'
=> 사용하려면 import로 가져와야 함

* 통상적 상위하위 순서
main.js -> App.vue -> views폴더의 파일 -> components 폴더의 파일

=> 줄 때
provide('줄때 쓸 이름', 변수/함수)

=> 받을 때
inject('이름')

{예시}
* 상위 파일 => provide('good', printGood) 
* 하위 파일 => inject('good')
printGood이란 이름의 함수를 'good'이란 이름으로 줬고,
그 이름을 그대로 하위 파일에서 'good'이란 이름을 써서 받아먹은 것들은



emit()는 반대로 자식 컴포넌트에서 부모 컴포넌트로 데이터를 보낼 때 사용
* TodoListMenu.vue 파일을 참고
  ㄴ watch를 통해서 데이터 변화를 지켜본 다음,
     데이터가 변형됐다면 filter라는 변수를 'change-filter'라는
     이름에 담아서 올려보내는 부분이 있음

이렇게 보내는 데이터는
import 데이터를보낸컴포넌트의name값 from '데이터를보낸컴포넌트의경로'





// session
vue3에선 이전 버전과 문법상 다른 부분이 있으므로
../node_modules/vue-session/index.js의 일부분을 수정해야 함

* 이 사이트의 내용을 덮어쓰기
https://archijude.tistory.com/419

* 이후 이렇게 import해서 사용
import VueSession from 'vue-session/index'



// local storage



// firebase




// JSON 가져오기



// 자주 발생하는 에러 요인
1. import로 불러온 기능을 사용하지 않음
{예시}
import { reactive, ref } from 'vue'
const array = reactive([]);
=> ref를 불러놓고 사용하지 않아서 오류가 출력됨