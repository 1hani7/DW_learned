// Chart.js 문법 정리

* 객체와 배열의 문법을 사용하게 됨


// 전체적인 틀 구성

let ctx = $("#캔버스id")[0]; // 대상 캔버스 지정

new Chart( ctx, { // 새로운 차트 만들기
    type : "", // => 차트의 타입 bar, line, pie, doughnut, bubble, polar, radar...
    data : {
        labels : 문자열 or 배열,
        dataset : [ { 배열 안에 객체들이 들어간 형식 } ] // 객체가 늘어날 때마다 차트도 늘어남
                                                       // 객체를 각각 변수에 따로 저장해서 관리하는 것도 좋음
    },
    options : {
        key값 : { 객체 내용 },
        plugins : {},
        scale : {
            x : {},
            y : {}
        }
    }
});

// dataset 객체 문법

const chart1 = {
    type : 문자열, // 여기에 타입을 쓰면, 여러 차트들에게 각각 다른 타입을 부여할 수 있음
    label : 문자열 or 배열[idx],
    data : 배열,
    꾸미기 스타일
}


/* 스타일 목록 */

backgroundColor                // 배경색
borderWidth                    // 테두리 너비
borderRadius                   // 테두리 라운딩
borderColor                    // 테두리 색
barPercentage                  // 막대 너비 비율 ( 0.9가 기본 )
barThickness                   // 막대 너비 ( 고정px, 단위 생략 입력 )
borderSkipped                  // start, end, middle, bottom, left, top, right
categoryPercentage:            // 카테고리 간격 및 너비 ( 0.8이 기본 )
rotation:                      // 차트 기울이기 ( type : "pie", "doughnut" 의 경우 )
indexAxis:                     // 그래프 "x"방향 or "y"방향
hoverBackgroundColor           // hover시의 배경색
            ㄴ hoverBorderColor, hoverBorderWidth, hoverBorderRadius 등등 사용 가능
base:                          // 시작값 입력 => 평균값을 입력하면 평균 이상인지 이하인지 확인 가능


// options
scale:{
    x:{ stacked:true },        // x축, 차트 쌓임
    y:{ stacked:true },        // y축, 차트 쌓임
    x:{ min: , max: },         // x축 최대값과 최소값
    y:{ min: , max: },         // y축 최대값과 최소값
}

// plugins

=> 차트 값별로 라벨 표시 plugin
plugins:[ChartDataLabels]
plugins:{
            datalabels:{
                formatter:function(v,c){
                    return v + "개";
                }, color:"white"
            },
            title:{
                display:true,
                text:"커피누적"
            }
        }

=> autocolors


// animation

// 콜백함수
    대상요소 : function(context){
        return ;
    }

    context // 

    context.chart.getDatasetMeta(0)