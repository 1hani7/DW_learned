//정규표현식
특정판 패턴을 찾거나 변환하기 위한 매칭 기술  *문자열 처리와 검색에 유용
예시 : return m.replace(/[aeiou]/g, ''); => 문자열 m 안에서 모음을 탐색, ''로 바꿔줌

`g`: 전역 검색. 문자열 전체에서 패턴을 모두 찾습니다.
`i`: 대소문자 구분 없는 검색.
`m`: 여러 줄 검색.

`.`: 어떤 문자와도 일치.
`[]`: 문자 범위를 지정.
`^`: 문자열의 시작을 나타냅니다.
`$`: 문자열의 끝을 나타냅니다.
`*`: 바로 앞의 문자가 0번 이상 나타남.
`+`: 바로 앞의 문자가 1번 이상 나타남.
`?`: 바로 앞의 문자가 0번 또는 1번 나타남.
`()`: 그룹을 나타냅니다.


// 이메일 유효성 검사
const emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;
const email = "example@email.com";
console.log(emailPattern.test(email)); // true


// 전화번호 형식 변환
const phoneNumber = "123-456-7890";
const formattedNumber = phoneNumber.replace(/-/g, ".");
console.log(formattedNumber); // "123.456.7890"


// URL에서 도메인 추출
const url = "https://www.example.com/page";
const domain = url.match(/^(?:https?:\/\/)?(?:[^@\n]+@)?(?:www\.)?([^:\/\n]+)/)[1];
console.log(domain); // "example.com"


// 숫자와 문자 조합 검사
const alphanumericPattern = /^[a-zA-Z0-9]+$/;
console.log(alphanumericPattern.test("abc123")); // true
console.log(alphanumericPattern.test("abc 123")); // false


// 숫자 천 단위 구분자 추가
const numberWithCommas = "1234567";
const formattedNumber = numberWithCommas.replace(/\B(?=(\d{3})+(?!\d))/g, ",");
console.log(formattedNumber); // "1,234,567"


// HTML 태그 제거
const htmlString = "<p>This is <strong>bold</strong> text.</p>";
const textOnly = htmlString.replace(/<\/?[^>]+(>|$)/g, "");
console.log(textOnly); // "This is bold text."


// 날짜 형식 변환
const date = "2023-08-03";
const formattedDate = date.replace(/^(\d{4})-(\d{2})-(\d{2})$/, "$2/$3/$1");
console.log(formattedDate); // "08/03/2023"