//메소드

.reduce()

.filter() 메서드는 callback 함수에서 반환하는 값이 true인 요소들만
새로운 배열에 포함합니다. 반환값이 false인 요소는 제외됩니다.

.map((num)=>{})    - 배열 요소 각각의 내용을 바꿔줌

.reverse() 배열 역순 재배치

callback 함수의 매개변수를 기입하는 중,
사용하지 않게 될 매개변수가 있다면 '_' 로 대체표기할 수 있습니다.
이러면 사용하지 않을 매개변수의 이름을 굳이 구상할 필요가 사라집니다.


.sort() - 콜백함수의 식의 결과가 음수이면 자리를 바꿈


// for...of 문법
for (var num of numbers)
numbers에 들어있는 num 하나씩에 대한 명령 수행 가능
*문자열에도 사용 가능



// [...배열명] 전개연산자(스프레드)
[1,2,3]인 상태를 일시적으로 1,2,3 으로 바꿔줌
다른 배열이나 객체에 복사, 결합하는 작업 등을 수행할 수 있음
예 - combinedArray = [...array1, ...array2];
예2 - arr.forEach(num=>x.push(...Array(num).fill(num)));
      ㄴ arr라는 배열 안의 숫자들 num을 num 길이만큼 채운 배열을
         스프레드로 펼쳐서 x라는 배열 안에 넣어주는 모습


//
for문에 들어가는 i 가 무조건 0일 필요도, 1씩만 늘어날 필요도 없다
0~N까지의 숫자 중 무언가를 찾는다면 for문을 쓰는 것이 좋다


// 판독기
Number.isInteger(n) - 정수인지 판독
isNaN(n) - 숫자인지 판독
parseFloat(n) - 문자를 지우고 실수만 추출



true와 false는 각각 1과 0의 숫자를 가짐
+를 붙여주면 불리언 값이 숫자값으로 변환됨

조건연산자에서도 사용가능
k%2?k+1:k-1;
k%2가 1, 즉 홀수, 즉 true
k%2가 0, 즉 짝수, 즉 false


// 비구조화 or 구조분해 할당 (배열)
const dot = [5, 10];
const [num1, num2] = dot;
이러면 인덱스를 사용하지 않아도 배열 요소를 사용할 수 있음
요소가 세 개인데 두 개만 할당하면 0번쨰, 1번째만 가져오는 것
예시=>function solution(dot) {
        const [num,num2] = dot;
        const check = num * num2 > 0;
        return num > 0 ? (check ? 1 : 4) : (check ? 3 : 2);
    }
예시2=>const solution=nl=>{
        const [a,b]=[...num_list].reverse();
        return [...num_list, a>b ? a-b:a*2];
    }


// 최대공약수 간단히 구하기
let gcd = (a, b) => (a % b === 0 ? b : gcd(b, a % b));
ㄴ 함수 안에 또 함수 만들어서 매개변수 넣고 콜백하기


// while(true)를 해두면 break가 되기 전까지만 돌아간다


//수학 함수:
Math.abs(x): 주어진 숫자의 절댓값을 반환합니다.
Math.ceil(x): 주어진 숫자를 올림하여 정수로 반환합니다.
Math.floor(x): 주어진 숫자를 내림하여 정수로 반환합니다. (== ~~())
Math.round(x): 주어진 숫자를 반올림하여 가장 가까운 정수로 반환합니다.
Math.max(x1, x2, ..., xn): 주어진 숫자 중 가장 큰 값을 반환합니다.*
Math.min(x1, x2, ..., xn): 주어진 숫자 중 가장 작은 값을 반환합니다.*
Math.pow(base, exponent): 지수 연산을 수행하여 base의 exponent 제곱 값을 반환합니다.
Math.sqrt(x): 주어진 숫자의 제곱근 값을 반환합니다.
Math.random(): 0 이상 1 미만의 난수를 반환합니다.

삼각 함수:
Math.sin(x): 주어진 각도의 사인 값을 반환합니다.
Math.cos(x): 주어진 각도의 코사인 값을 반환합니다.
Math.tan(x): 주어진 각도의 탄젠트 값을 반환합니다.
Math.asin(x): 사인 역함수를 계산하여 각도를 반환합니다.
Math.acos(x): 코사인 역함수를 계산하여 각도를 반환합니다.
Math.atan(x): 탄젠트 역함수를 계산하여 각도를 반환합니다.

상수:
Math.PI: 원주율(π) 값을 반환합니다.
Math.E: 자연 상수(e) 값을 반환합니다.


// 비트 연산자
& (AND): 두 비트가 모두 1일 때 1을 반환합니다.
| (OR): 두 비트 중 하나 이상이 1일 때 1을 반환합니다.
^ (XOR): 두 비트가 다를 때 1을 반환합니다.
~ (NOT): 비트를 반전시켜서 0을 1로, 1을 0으로 바꿉니다. / ~~두 번 사용하면 소수점만 떼어줍니다.
<< (왼쪽 시프트): 비트열을 왼쪽으로 이동시킵니다.
>> (오른쪽 시프트): 비트열을 오른쪽으로 이동시킵니다. 부호를 유지합니다.
>>> (부호 없는 오른쪽 시프트): 비트열을 오른쪽으로 이동시킵니다. 부호를 무시하고 0으로 채웁니다.
